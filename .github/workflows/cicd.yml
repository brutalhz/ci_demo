name: Create release branch
on: 
  workflow_dispatch:
    # inputs:
    #   dev_branch:
    #     description: The source branch to create the dev branch from.
    #     required: false
    #     default: 'main'
    #   release_branch:
    #     description: The name of the release branch to create.
    #     required: true
    #     default: 'release'

jobs:
#   CreateBranchNew:
#     name: Create Branch
#     runs-on: ubuntu-latest
#     permissions: write-all
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v3

# #       - name: Create release branch
# #         env:
# #           DEV_BRANCH: ${{ github.event.inputs.dev_branch }}
# #           RELEASE_BRANCH: ${{ github.event.inputs.release_branch }}
# #         run: |
# #           git fetch origin
# #           git checkout -b ${RELEASE_BRANCH} origin/${DEV_BRANCH} && git push --set-upstream origin ${RELEASE_BRANCH}
          
#       - name: Create release branch
#         env:
#           DEV_BRANCH: ${{ github.event.inputs.dev_branch }}
#           RELEASE_BRANCH: ${{ github.event.inputs.release_branch }}
#           GIT_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#         run: |
#           echo "${GITHUB_ACTOR}"
#           curl -X POST \
#             ${{ github.api_url }}/repos/${{ github.repository_owner }}/${{ github.event.repository.name }}/git/refs \
#             -H 'Authorization: Bearer ${{ env.GIT_TOKEN }}' \
#             -H "Accept: application/vnd.github+json" \
#             -d '{"ref":"refs/heads/${{ env.RELEASE_BRANCH }}","sha":"${{ github.sha }}"}'

  # CreateBranchNew:
  #   name: Create Branch
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v3
  #       with:
  #         fetch-depth: 0
  #         token: ${{ secrets.GITHUB_TOKEN }}
       
  #     - name: Check Release Branch
  #       shell: bash
  #       env:
  #         RELEASE_BRANCH: release
  #       id: release_branch_exists
  #       run: |
  #         if git branch -r | grep -q $RELEASE_BRANCH; then
  #           echo "::error::Release branch '$RELEASE_BRANCH' already exists."
  #           exit 1
  #         else
  #           echo "SUCCESS. Branch does not exist yet!"
  #           exit 0
  #         fi

  #     - name: Create release branch
  #       if: ${{ steps.release_branch_exists.conclusion == 'success' }}
  #       run: |
  #         git checkout -b release main
  #         git push --set-upstream origin release

  #     - name: Run workflow Chronos CI release
  #       run: |
  #         curl \
  #         -X POST -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
  #         -H "Accept: application/vnd.github.v3+json" \
  #          ${{ github.api_url }}/repos/${{ github.repository_owner }}/${{ github.event.repository.name }}/actions/workflows/release.yml/dispatches \
  #         -d '{"ref":"release"}'

  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Generate JWT
        id: jwt
        run: |
          APP_ID=${{ secrets.APP_ID }}
          PRIVATE_KEY="${{ secrets.PRIVATE_KEY }}"
          
          # Заменяем символы переноса строки на нужный формат
          PRIVATE_KEY=$(echo "$PRIVATE_KEY" | tr -d 'r' | awk '{printf "%s\n", $0}')
          
          # Генерируем токен
          NOW=$(date +%s)
          EXP=$(($NOW + 600)) # Токен действителен 10 минут
          
          HEADER='{"alg":"RS256","typ":"JWT"}'
          PAYLOAD="{"iat":$NOW,"exp":$EXP,"iss":"$APP_ID"}"
          
          BASE64_HEADER=$(echo -n "$HEADER" | openssl base64 | tr -d '=' | tr '/+' '_-' | tr -d 'n')
          BASE64_PAYLOAD=$(echo -n "$PAYLOAD" | openssl base64 | tr -d '=' | tr '/+' '_-' | tr -d 'n')
          
          SIGNATURE=$(echo -n "$BASE64_HEADER.$BASE64_PAYLOAD" | openssl dgst -sha256 -sign <(echo "$PRIVATE_KEY") | openssl base64 | tr -d '=' | tr '/+' '_-' | tr -d 'n')
          
          JWT="$BASE64_HEADER.$BASE64_PAYLOAD.$SIGNATURE"
          echo "JWT=${JWT}" >> $GITHUB_ENV

      - name: Use GitHub App Token
        run: |
          TOKEN=${{ env.JWT }}
          
          # Пример вызова API GitHub от имени вашего приложения
          curl -H "Authorization: Bearer $TOKEN" 
               -H "Accept: application/vnd.github.v3+json" 
               https://api.github.com/app/installations

  # create-pr:
  #     runs-on: ubuntu-latest
  #     needs: CreateBranchNew
  #     steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v3
  #       with:
  #         fetch-depth: 0
  #     - name: Create PR
  #       run: |
  #         git config --global user.name "github-actions"
  #         git config --global user.email "github-actions@github.com"
  #         git checkout release
  #         curl -X POST \
  #           https://api.github.com/repos/${{ github.repository_owner }}/${{ github.event.repository.name }}/pulls \
  #           -H 'Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}' \
  #           -H 'Content-Type: application/json' \
  #           -d '{"title":"Automerge release into master","body":"Automerge release into master","head":"release","base":"example-patches","maintainer_can_modify":true,"auto_merge":true,"delete_branch":true}'

    
