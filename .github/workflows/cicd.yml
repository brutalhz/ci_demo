name: Create release branch
on: 
  workflow_dispatch:
    # inputs:
    #   dev_branch:
    #     description: The source branch to create the dev branch from.
    #     required: false
    #     default: 'main'
    #   release_branch:
    #     description: The name of the release branch to create.
    #     required: true
    #     default: 'release'

jobs:
#   CreateBranchNew:
#     name: Create Branch
#     runs-on: ubuntu-latest
#     permissions: write-all
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v3

# #       - name: Create release branch
# #         env:
# #           DEV_BRANCH: ${{ github.event.inputs.dev_branch }}
# #           RELEASE_BRANCH: ${{ github.event.inputs.release_branch }}
# #         run: |
# #           git fetch origin
# #           git checkout -b ${RELEASE_BRANCH} origin/${DEV_BRANCH} && git push --set-upstream origin ${RELEASE_BRANCH}
          
#       - name: Create release branch
#         env:
#           DEV_BRANCH: ${{ github.event.inputs.dev_branch }}
#           RELEASE_BRANCH: ${{ github.event.inputs.release_branch }}
#           GIT_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#         run: |
#           echo "${GITHUB_ACTOR}"
#           curl -X POST \
#             ${{ github.api_url }}/repos/${{ github.repository_owner }}/${{ github.event.repository.name }}/git/refs \
#             -H 'Authorization: Bearer ${{ env.GIT_TOKEN }}' \
#             -H "Accept: application/vnd.github+json" \
#             -d '{"ref":"refs/heads/${{ env.RELEASE_BRANCH }}","sha":"${{ github.sha }}"}'

  CreateBranchNew:
    name: Create Branch
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
       
      - name: Check Release Branch
        shell: bash
        env:
          RELEASE_BRANCH: release
        id: release_branch_exists
        run: |
          if git branch -r | grep -q $RELEASE_BRANCH; then
            echo "::error::Release branch '$RELEASE_BRANCH' already exists."
            exit 1
          else
            echo "SUCCESS. Branch does not exist yet!"
            exit 0
          fi

      - name: Create release branch
        if: ${{ steps.release_branch_exists.conclusion == 'success' }}
        run: |
          git checkout -b release main
          git push --set-upstream origin release

      - name: Run workflow Chronos CI release
        run: |
          curl \
          -X POST -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
          -H "Accept: application/vnd.github.v3+json" \
           ${{ github.api_url }}/repos/${{ github.repository_owner }}/${{ github.event.repository.name }}/actions/workflows/release.yml/dispatches \
          -d '{"ref":"release"}'

      - name: Generate jmx token
        id: jmx_token
        shell: bash
        run: |
          set -o pipefail

          app_id=${{ vars.APP_ID }}
          pem=$( echo "${{ vars.PRIVATE_KEY }}" ) # file path of the private key as second argument

          now=$(date +%s)
          iat=$((${now} - 60)) # Issues 60 seconds in the past
          exp=$((${now} + 600)) # Expires 10 minutes in the future

          b64enc() { openssl base64 | tr -d '=' | tr '/+' '_-' | tr -d '\n'; }

          header_json='{
            "typ":"JWT",
            "alg":"RS256"
          }'
          # Header encode
          header=$( echo -n "${header_json}" | b64enc )

          payload_json="{
              \"iat\":${iat},
              \"exp\":${exp},
              \"iss\":\"${app_id}\"
          }"
          # Payload encode
          payload=$( echo -n "${payload_json}" | b64enc )

          # Signature
          header_payload="${header}"."${payload}"
          signature=$(
              openssl dgst -sha256 -sign <(echo -n "${pem}") \
              <(echo -n "${header_payload}") | b64enc
          )

          # Create JWT
          JWT="${header_payload}"."${signature}"
          echo "JWT: ${JWT}"
          echo "::set-output name=TOKEN::${JWT}
  
      - name: pr
        run: |
          git config --global user.name "github-actions"
          git config --global user.email "github-actions@github.com"
          git checkout release
          curl -X POST \
            https://api.github.com/repos/${{ github.repository_owner }}/${{ github.event.repository.name }}/pulls \
            -H 'Authorization: Bearer ${{ steps.get-token.outputs.token }}' \
            -H 'Content-Type: application/json' \
            -d '{"title":"Automerge release into master","body":"Automerge release into master","head":"release","base":"example-patches","maintainer_can_modify":true,"auto_merge":true,"delete_branch":true}'

  # create-pr:
  #     runs-on: ubuntu-latest
  #     needs: CreateBranchNew
  #     steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v3
  #       with:
  #         fetch-depth: 0
  #     - name: Create PR
  #       run: |
          # git config --global user.name "github-actions"
          # git config --global user.email "github-actions@github.com"
          # git checkout release
          # curl -X POST \
          #   https://api.github.com/repos/${{ github.repository_owner }}/${{ github.event.repository.name }}/pulls \
          #   -H 'Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}' \
          #   -H 'Content-Type: application/json' \
          #   -d '{"title":"Automerge release into master","body":"Automerge release into master","head":"release","base":"example-patches","maintainer_can_modify":true,"auto_merge":true,"delete_branch":true}'

    
